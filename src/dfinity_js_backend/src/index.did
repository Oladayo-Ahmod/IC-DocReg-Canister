service: (record {verifyDocFee:nat64; addDocFee:nat64}) -> {
    addDocument: (record {hash:text; name:text}, text, nat64, nat64) -> (variant {Ok:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}});
    createAddDocumentOrder: () -> (variant {Ok:record {fee:nat64; status:variant {PaymentPending:text; Completed:text}; memo:nat64; orderId:text; payer:principal; paid_at_block:opt nat64}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}});
    createVerifyDocumentOrder: () -> (variant {Ok:record {fee:nat64; status:variant {PaymentPending:text; Completed:text}; memo:nat64; orderId:text; payer:principal; paid_at_block:opt nat64}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}});
    deleteDocument: (text) -> (variant {Ok:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}});
    getAddDocumentFee: () -> (nat64) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterAddress: () -> (text) query;
    getTotalDocs: () -> (int32) query;
    getUserDocs: (principal) -> (vec text) query;
    getVerificationFee: () -> (nat64) query;
    verifyDocument: (record {hash:text}, text, nat64, nat64) -> (variant {Ok:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}});
    viewDocument: (principal, text) -> (variant {Ok:record {id:text; owner:principal; hash:vec nat8; name:text; createdAt:nat64}; Err:variant {Fail:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text; Exists:text}}) query;
}
